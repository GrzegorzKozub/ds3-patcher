#!/usr/bin/env python3

import argparse
import os
import re
import subprocess
import sys
from pathlib import Path
from shutil import rmtree

if __name__ != '__main__':
    sys.exit(1)

EXE: str = 'DarkSoulsIII.exe'
exe_hex: str = ''

this_file: str = os.path.basename(__file__)

dir_original: str = Path('.')
dir_temp: str = Path(f'{this_file}_temp')


def parse_args() -> tuple[argparse.Namespace, list[str]]:
    try:
        parser = argparse.ArgumentParser()
        parser.add_argument('-s', '--skip-logos',
                            action='store_true', help='skip publisher and developer logos')
        dbl_dash = sys.argv.index('--')
        cmd = sys.argv[1 + dbl_dash:]
        if not cmd:
            raise ValueError
        return parser.parse_args(sys.argv[1:dbl_dash]), cmd
    except ValueError:
        print(parser.format_usage().replace('\n', '') + ' -- <command>')
        sys.exit(1)


def open_hex(path: str, file: str) -> str:
    with open(path / file, 'rb') as f:
        return f.read().hex()


def patch_exe_hex(pattern: str, patch: str) -> None:
    global exe_hex
    if (match := re.search(pattern.replace(' ', ''), exe_hex)) is None:
        print('patch pattern not found')
        sys.exit(1)
    addr = match.span()[0]
    patch = patch.replace(' ', '')
    exe_hex = exe_hex[:addr] + patch + exe_hex[addr + len(patch):]


def create_temp_dir(original: str, temp: str, skip_files: list[str]) -> None:
    if not temp.is_dir():
        temp.mkdir()
    for d in [d for d in original.rglob('*') if d.is_dir()]:
        if d == temp:
            continue
        if not (temp / d).is_dir():
            (temp / d).mkdir(parents=True)
    for f in [f for f in original.rglob('*') if f.is_file()]:
        if f.name in skip_files:
            continue
        if not (temp / f).is_file():
            f.link_to(temp / f)


def save_exe_hex(path: str, file: str) -> None:
    global exe_hex
    with open(path / file, 'wb') as f:
        f.write(bytes.fromhex(exe_hex))
    del exe_hex


def switch_path(cmd: str, path: str) -> str:
    # TODO: path
    return cmd

def start_game(cmd: list[str], working_dir: str, exe: str) -> None:
    cmd[-1] = Path(cmd[-1]).parent.absolute() / working_dir / exe
    subprocess.run(cmd, cwd=cmd[-1].parent.absolute(), check=False)


args, command = parse_args()

if not args.skip_logos:
    start_game(command, dir_temp, EXE)
    sys.exit(0)

exe_hex = open_hex(dir_original, EXE)

if args.skip_logos:
    patch_exe_hex(
        'e8 1c ba fb',
        '48 31 c0 48 89 02 49 89 04 24 90 90 90 90 90 90 90 90 90 90')

create_temp_dir(dir_original, dir_temp, [EXE, this_file])
save_exe_hex(dir_temp, EXE)
command = switch_path(command, None)
start_game(command, dir_temp, EXE)
rmtree(dir_temp)
