#!/usr/bin/env python3

import argparse
import logging
import os
import re
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from shutil import rmtree

import yaml

if __name__ != '__main__':
    sys.exit(1)

exe_hex: str = ''

this_file: str = os.path.basename(__file__)

save_path = Path(yaml.safe_load(
    open(f'{this_file}.yaml', encoding='utf-8'))['save_path'])

logging.basicConfig(filename=f'{this_file}.log',
                    format='%(asctime)s %(levelname)s %(message)s', level=logging.INFO)
log = logging.getLogger(this_file)


def parse_invocation() -> tuple[argparse.Namespace, list[str]]:
    dbl_dash = sys.argv.index('--')
    args = sys.argv[1:dbl_dash]
    log.info('arguments: %s', args)
    cmd = sys.argv[1 + dbl_dash:]
    log.info('command: %s', cmd)
    parser = argparse.ArgumentParser(exit_on_error=False)
    parser.add_argument('-s', '--skip-logos',
                        action='store_true', help='skip publisher and developer logos')
    return parser.parse_args(args), cmd


def parse_command(cmd: str) -> tuple[str, str]:
    path = Path(cmd[-1])
    return path.parent.absolute(), path.name


def create_temp_dir(path: str, skip_files: list[str]) -> None:
    current = Path('.')
    if not path.is_dir():
        path.mkdir()
    for d in [d for d in current.rglob('*') if d.is_dir()]:
        if d == path:
            continue
        if not (path/d).is_dir():
            (path/d).mkdir(parents=True)
    for f in [f for f in current.rglob('*') if f.is_file()]:
        if f.name in skip_files:
            continue
        if not (path/f).is_file():
            f.link_to(path/f)


def remove_temp_dir(path: str) -> None:
    rmtree(path)


def open_hex(path: str) -> str:
    with open(path, 'rb') as f:
        return f.read().hex()


def patch_exe_hex(pattern: str, patch: str) -> None:
    global exe_hex
    if (match := re.search(pattern.replace(' ', ''), exe_hex)) is None:
        log.error('patch pattern %s not found', pattern)
        sys.exit(1)
    addr = match.span()[0]
    patch = patch.replace(' ', '')
    exe_hex = exe_hex[:addr] + patch + exe_hex[addr + len(patch):]


def save_exe_hex(path: str) -> None:
    global exe_hex
    with open(path, 'wb') as f:
        f.write(bytes.fromhex(exe_hex))
    del exe_hex


def switch_command(cmd: list[str], path: str) -> None:
    cmd[-1] = str(path)


def in_save_path(cmd) -> None:
    subprocess.run(cmd, cwd=Path(save_path),
                   stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)


def fetch_save() -> None:
    log.info('fetch save to %s', save_path)
    in_save_path(['git', 'pull'])


def push_save() -> None:
    log.info('push save to %s', save_path)
    status = subprocess.Popen(['git', 'status', '--porcelain'], cwd=save_path,
                              stdout=subprocess.PIPE, universal_newlines=True).stdout.readline()
    if len(status) > 0:
        in_save_path(['git', 'add', '.'])
        in_save_path(
            ['git', 'commit', '-m', datetime.now().strftime('%Y%m%d%H%M')])
        in_save_path(['git', 'push'])


def start_game(cmd: list[str]) -> None:
    fetch_save()
    log.info('start %s', cmd)
    subprocess.run(cmd, cwd=Path(cmd[-1]).parent.absolute(), check=False)
    push_save()


try:
    arguments, command = parse_invocation()
    game_dir, exe = parse_command(command)

    if arguments.skip_logos:  # any arguments?

        temp_dir = game_dir/f'{this_file}_temp'
        create_temp_dir(temp_dir, [exe, this_file])

        exe_hex = open_hex(game_dir/exe)

        if arguments.skip_logos:
            patch_exe_hex(
                'e8 1c ba fb',
                '48 31 c0 48 89 02 49 89 04 24 90 90 90 90 90 90 90 90 90 90')

        save_exe_hex(temp_dir/exe)

        switch_command(command, temp_dir/exe)
        start_game(command)

        remove_temp_dir(temp_dir)

    else:
        start_game(command)

except Exception:
    log.error('unknown error:', exc_info=True)
